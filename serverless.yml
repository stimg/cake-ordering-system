service: cake-ordering-system
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource:
        arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/ordersTable
    - Effect: Allow
      Action:
        - kinesis:PutRecord
      Resource:
        arn:aws:kinesis:${aws:region}:${aws:accountId}:stream/order-events
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource:
        - "*"
      Condition:
        StringEquals:
          ses:FromAddress:
            - cakeordermail@grr.la

functions:
  createOrder:
    handler: handler.createOrder
    events:
      - http:
          path: /order
          method: post
    environment:
      orderTableName: ordersTable
      orderStreamName: order-events
  orderFulfilled:
    handler: handler.orderFulfilled
    events:
      - http:
          path: /order/fulfilled
          method: post
    environment:
      orderTableName: ordersTable
      orderStreamName: order-events
  notifyCakeProducer:
    handler: handler.notifyCakeProducer
    events:
      - stream:
          arn: arn:aws:kinesis:${aws:region}:${aws:accountId}:stream/order-events
    environment:
      region: ${aws:region}
      cakeProducerEmail: cakeproducermail@grr.la
      cakeOrderEmail: cakeordermail@grr.la

resources:
  Resources:
    orderEventsStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: order-events
        ShardCount: 1

    orderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ordersTable
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
